{".source.js":{"Register Service Worker":{"prefix":"sw-register","description":"Register Service Worker","types":"typescript, javascript","body":"if ('serviceWorker' in navigator) {\n\twindow.addEventListener('load', () => {\n\tnavigator.serviceWorker.register('/sw.js');\n});\n}$0"},"Register Service Worker and Check":{"prefix":"sw-register-and-check","description":"Register Service Worker and Check","types":"typescript, javascript","body":"if ('serviceWorker' in navigator) {\nif('serviceWorker' in window.navigator) {\n\twindow.addEventListener('load', () => {\n\t\twindow.navigator.serviceWorker.register('/sw.js', { scope: '/' }).then((registration) => {\n\t\t\tconsole.log('ServiceWorker registration successful with scope: ', registration.scope);\n\t\t}).catch((error) => {\n\t\t\tconsole.error('ServiceWorker registration failed: ', error);\n\t\t});\n\t});\n}$0"},"RxJS MergeMap Example":{"prefix":"rx-mergeMap-example","description":"RxJS MergeMap Example","types":"typescript, javascript","body":"getItems(ids: number[]): Observable<Item> {\n\treturn from(ids).pipe(\n\t\tmergeMap(id => <Observable<Item>> this.httpClient.get(`item/${1:id}`))\n\t);\n}\n$0"},"RxJS Import Subject":{"prefix":"rx-import-subject","description":"RxJS Import Subject","types":"typescript, javascript","body":"import { Subject } from 'rxjs';\n$0"},"RxJS Import Observable":{"prefix":"rx-import-observable","description":"RxJS Import Observable","types":"typescript, javascript","body":"import { Observable } from 'rxjs';\n$0"},"RxJS Import an Operator":{"prefix":"rx-import-operator","description":"RxJS Import Add Operator","types":"typescript, javascript","body":"import { ${1:switchMap} } from 'rxjs/operators';\n$0"}}}
