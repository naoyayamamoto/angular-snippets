{
    "Material Chip List": {
        "prefix": "m-chip-list",
        "description": "Material Chip List",
        "types": "typescript, html",
        "body": [
            "<mat-chip-list>",
            "\t<mat-chip>${text}<mat-chip>",
            "</mat-chip-list>$0"
        ]
    },
    "Material Chip Stacked List": {
        "prefix": "m-chip-list-stacked",
        "description": "Material Chip Stacked List",
        "types": "typescript, html",
        "body": [
            "<mat-chip-list class=\"mat-chip-list-stacked\">",
            "\t<mat-chip>${text}<mat-chip>",
            "</mat-chip-list>$0"
        ]
    },
    "Material Chip": {
        "prefix": "m-chip",
        "description": "Material Chip",
        "types": "typescript, html",
        "body": [
            "<mat-chip>${text}<mat-chip>$0"
        ]
    },
    "Material Select": {
        "prefix": "m-select",
        "description": "Material Select",
        "types": "typescript, html",
        "body": [
            "<mat-select placeholder=\"${Placeholder}\" [(ngModel)]=\"selectedValue\" name=\"${item}\">",
            "\t<mat-option *ngFor=\"let ${item} of ${items}\" [value]=\"${item}.value\">",
            "\t\t{{${item}.viewValue}}",
            "\t</mat-option>",
            "</mat-select>$0"
        ]
    },
    "Material Slide Toggle": {
        "prefix": "m-slide-toggle",
        "description": "Material Slide toggle",
        "types": "typescript, html",
        "body": [
            "<mat-slide-toggle>${text}</mat-slide-toggle>$0"
        ]
    },
    "Material Slider": {
        "prefix": "m-slider",
        "description": "Material Slider",
        "types": "typescript, html",
        "body": [
            "<mat-slider min=\"${min}\" max=\"${max}\" step=\"${step}\" value=\"${value}\"></mat-slider>$0"
        ]
    },
    "Material Vertical Slider": {
        "prefix": "m-slider-vertical",
        "description": "Material Vertical Slider",
        "types": "typescript, html",
        "body": [
            "<mat-slider vertical min=\"${min}\" max=\"${max}\" step=\"${step}\" value=\"${value}\"></mat-slider>$0"
        ]
    },
    "Material Slider Thumblabel": {
        "prefix": "m-slider-thumbLabel",
        "description": "Material Slider thumbLabel",
        "types": "typescript, html",
        "body": [
            "<mat-slider thumbLabel tickInterval=\"${interval}\"></mat-slider>$0"
        ]
    },
    "Material Slider TickInterval": {
        "prefix": "m-slider-tickInterval",
        "description": "Material Slider tickInterval",
        "types": "typescript, html",
        "body": [
            "<mat-slider step=\"${step}\" tickInterval=\"${interval}\"></mat-slider>$0"
        ]
    },
    "Material Slider TickInterval Auto": {
        "prefix": "m-slider-tickInterval-auto",
        "description": "Material Slider tickInterval Auto",
        "types": "typescript, html",
        "body": [
            "<mat-slider tickInterval=\"auto\"></mat-slider>$0"
        ]
    },
    "Material List": {
        "prefix": "m-list",
        "description": "Material List",
        "types": "typescript, html",
        "body": [
            "<mat-list>",
            "\t<mat-list-item>${item}</mat-list-item>$1",
            "</mat-list>$0"
        ]
    },
    "Material List ngFor": {
        "prefix": "m-list-ngfor",
        "description": "Material List ngFor",
        "types": "typescript, html",
        "body": [
            "<mat-list>",
            "\t<mat-list-item *ngFor=\"let ${item} of ${items}\">{{ ${item} }}</mat-list-item>$1",
            "</mat-list>$0"
        ]
    },
    "Material List Item": {
        "prefix": "m-list-item",
        "description": "Material List Item",
        "types": "typescript, html",
        "body": [
            "<mat-list-item>${item}</mat-list-item>$0"
        ]
    },
    "Material Tab Group": {
        "prefix": "m-tab-group",
        "description": "Material Tab Group",
        "types": "typescript, html",
        "body": [
            "<mat-tab-group>",
            "\t<mat-tab label=\"${TabHeader1}\">$1</mat-tab>",
            "\t<mat-tab label=\"${TabTabHeader2}\">$2</mat-tab>",
            "</mat-tab-group>$0"
        ]
    },
    "Material Tab": {
        "prefix": "m-tab",
        "description": "Material Tab",
        "types": "typescript, html",
        "body": [
            "<mat-tab label=\"${TabHeader}\">$1</mat-tab>$0"
        ]
    },
    "Material Tooltip": {
        "prefix": "m-tooltip",
        "description": "Material Tooltip",
        "types": "typescript, html",
        "body": [
            "matTooltip=\"${text}\"$0"
        ]
    },
    "Material Tooltip Position": {
        "prefix": "m-tooltip-position",
        "description": "Material Tooltip position",
        "types": "typescript, html",
        "body": [
            "[matTooltipPosition]=\"${1|above,below,left,right,before,after|}\"$0"
        ]
    },
    "Material Tooltip With Position": {
        "prefix": "m-tooltip-with-position",
        "description": "Material Tooltip with position",
        "types": "typescript, html",
        "body": [
            "matTooltip=\"${text}\" [matTooltipPosition]=\"${1|above,below,left,right,before,after|}\"$0"
        ]
    },
    "Material Table": {
        "prefix": "m-table",
        "description": "Material Table",
        "types": "typescript, html",
        "body": [
            "<mat-table #table [dataSource]=\"${dataSource}\">",
            "\t<ng-container cdkColumnDef=\"${column}\">",
            "\t\t<mat-header-cell *cdkHeaderCellDef> ${header} </mat-header-cell>",
            "\t\t<mat-cell *cdkCellDef=\"let row\"> {{row.${column}}} </mat-cell>",
            "\t</ng-container>",
            "</mat-table>$0"
        ]
    },
    "Material Table Column": {
        "prefix": "m-table-column",
        "description": "Material Table Column",
        "types": "typescript, html",
        "body": [
            "<ng-container cdkColumnDef=\"${column}\">",
            "\t<mat-header-cell *cdkHeaderCellDef> ${header} </mat-header-cell>",
            "\t<mat-cell *cdkCellDef=\"let row\"> {{row.${column}}} </mat-cell>",
            "</ng-container>$0"
        ]
    },
    "Material Grid List": {
        "prefix": "m-grid-list",
        "description": "Material Grid List",
        "types": "typescript, html",
        "body": [
            "<mat-grid-list cols=\"${cols}\" rowHeight=\"${height}px\">",
            "\t<mat-grid-tile",
            "\t\t*ngFor=\"let ${tile} of ${tiles}\"",
            "\t\t[colspan]=\"${tile}.cols\"",
            "\t\t[rowspan]=\"${tile}.rows\"",
            "\t\t{{${tile}.text}}",
            "\t</mat-grid-tile>",
            "</mat-grid-list>$0"
        ]
    },
    "Material Paginator": {
        "prefix": "m-paginator",
        "description": "Material Paginator",
        "types": "typescript, html",
        "body": [
            "<mat-paginator [length]=\"${length}\"",
            "\t[pageSize]=\"${pageSize}\"",
            "\t[pageSizeOptions]=\"${pageSizeOptions}\"",
            "\t(page)=\"pageEvent = $${event}\">",
            "</mat-paginator>$0"
        ]
    },
    "Material Determinate Spinner": {
        "prefix": "m-spinner",
        "description": "Material Determinate Spinner",
        "types": "typescript, html",
        "body": [
            "<mat-spinner",
            "\t[value]=\"${value}\">",
            "</mat-spinner>$0"
        ]
    },
    "Material Indeterminate Progress Bar": {
        "prefix": "m-progress-bar-indeterminate",
        "description": "Material indeterminate Progress Bar",
        "types": "typescript, html",
        "body": [
            "<mat-progress-bar",
            "\tmode=\"indeterminate\"",
            "</mat-progress-bar>$0"
        ]
    },
    "Material Query Progress Bar": {
        "prefix": "m-progress-bar-query",
        "description": "Material Query Progress Bar",
        "types": "typescript, html",
        "body": [
            "<mat-progress-bar",
            "\tmode=\"query\"",
            "</mat-progress-bar>$0"
        ]
    },
    "Material Buffer Progress Bar": {
        "prefix": "m-progress-bar-buffer",
        "description": "Material Buffer Progress Bar",
        "types": "typescript, html",
        "body": [
            "<mat-progress-bar",
            "\tmode=\"buffer\"",
            "\t[color]=\"${color}\"",
            "\t[value]=\"${value}\"",
            "\t[bufferValue]=\"${bufferValue}\"",
            "</mat-progress-bar>$0"
        ]
    },
    "Material Determinate Progress Bar": {
        "prefix": "m-progress-bar",
        "description": "Material Determinate Progress Bar",
        "types": "typescript, html",
        "body": [
            "<mat-progress-bar",
            "\tmode=\"determinate\"",
            "\t[value]=\"${value}\">",
            "</mat-progress-bar>$0"
        ]
    },
    "Material Expansion Panel": {
        "prefix": "m-expansion-panel",
        "description": "Material Expansion Panel",
        "types": "typescript, html",
        "body": [
            "<mat-expansion-panel>",
            "\t<mat-expansion-panel-header>",
            "\t\t${title}",
            "\t</mat-expansion-panel-header>",
            "\t${content}",
            "</mat-expansion-panel>$0"
        ]
    },
    "Material Vertical Stepper": {
        "prefix": "m-stepper-vertical",
        "description": "Material Vertical Stepper",
        "types": "typescript, html",
        "body": [
            "<mat-vertical-stepper>",
            "\t<mat-step label=\"${label1}\">",
            "\t\t$1",
            "\t</mat-step>",
            "\t<mat-step label=\"${label2}\">",
            "\t\t$2",
            "\t</mat-step>",
            "</mat-vertical-stepper>$0"
        ]
    },
    "Material Horizontal Stepper": {
        "prefix": "m-stepper-horizontal",
        "description": "Material Horizontal Stepper",
        "types": "typescript, html",
        "body": [
            "<mat-horizontal-stepper>",
            "\t<mat-step label=\"${label1}\">",
            "\t\t$1",
            "\t</mat-step>",
            "\t<mat-step label=\"${label2}\">",
            "\t\t$2",
            "\t</mat-step>",
            "</mat-horizontal-stepper>$0"
        ]
    },
    "Material Stepper Step": {
        "prefix": "m-step",
        "description": "Material Vertical Stepper",
        "types": "typescript, html",
        "body": [
            "<mat-step label=\"${label}\">",
            "\t$1",
            "</mat-step>",
            "$0"
        ]
    },
    "Material Indeterminate Spinner": {
        "prefix": "m-spinner-indeterminate",
        "description": "Material Indeterminate Spinner",
        "types": "typescript, html",
        "body": [
            "<mat-spinner",
            "\t[mode]=\"indeterminate\">",
            "</mat-spinner>$0"
        ]
    },
    "Material Divider": {
        "prefix": "m-divider",
        "description": "Material Divider",
        "types": "typescript, html",
        "body": [
            "<mat-divider></mat-divider>$0"
        ]
    },
    "Material Inset Divider": {
        "prefix": "m-divider-inset",
        "description": "Material Inset Divider",
        "types": "typescript, html",
        "body": [
            "<mat-divider [inset]=\"true\"></mat-divider>$0"
        ]
    },
    "Material Vertical Divider": {
        "prefix": "m-divider-vertical",
        "description": "Material Vertical Divider",
        "types": "typescript, html",
        "body": [
            "<mat-divider [vertical]=\"true\"></mat-divider>$0"
        ]
    },
    "Test Describe, It & Expect Example": {
        "prefix": "t-describe-it",
        "description": "Describe, It & Expect Example",
        "types": "typescript",
        "body": [
            "describe('${1:Description}', () => {",
            "\tit('${2:Test}', () => {",
            "\t\texpect($3).toBe($4);",
            "\t});",
            "});",
            "$0"
        ]
    },
    "Angular Http Interceptor": {
        "prefix": "ng-http-interceptor",
        "description": "Intercept an outgoing HttpRequest and optionally transform it or the response.",
        "types": "typescript",
        "body": [
            "import { Injectable } from '@angular/core';",
            "import {",
            "\tHttpEvent, HttpInterceptor, HttpHandler, HttpRequest",
            "} from '@angular/common/http';",
            "",
            "@Injectable()",
            "export class ${1:Name}Interceptor implements HttpInterceptor {",
            "\tintercept(req: HttpRequest<any>, next: HttpHandler) {",
            "\t\treturn next.handle(req);",
            "\t}",
            "}"
        ]
    },
    "Register Service Worker": {
        "prefix": "sw-register",
        "description": "Register Service Worker",
        "types": "typescript, javascript",
        "body": [
            "if ('serviceWorker' in navigator) {",
            "\twindow.addEventListener('load', () => {",
            "\tnavigator.serviceWorker.register('/sw.js');",
            "});",
            "}$0"
        ]
    },
    "PWA Link manifest": {
        "prefix": "pwa-link-manifest",
        "description": "PWA Link Manifest",
        "types": "html",
        "body": [
            "<link rel=\"manifest\" href=\"./manifest.json\">$0"
        ]
    },

    "Register Service Worker and Check": {
        "prefix": "sw-register-and-check",
        "description": "Register Service Worker and Check",
        "types": "typescript, javascript",
        "body": [
            "if ('serviceWorker' in navigator) {",
            "if('serviceWorker' in window.navigator) {",
            "\twindow.addEventListener('load', () => {",
            "\t\twindow.navigator.serviceWorker.register('/sw.js', { scope: '/' }).then((registration) => {",
            "\t\t\tconsole.log('ServiceWorker registration successful with scope: ', registration.scope);",
            "\t\t}).catch((error) => {",
            "\t\t\tconsole.error('ServiceWorker registration failed: ', error);",
            "\t\t});",
            "\t});",
            "}$0"
        ]
    }
}