{
    "Angular ngRx Util": {
        "prefix": "ngrx-util",
        "description": "ngRx Util",
        "types": "typescript",
        "body": [
            "/**",
            "\t* This function coerces a string into a string literal type.",
            " * Using tagged union types in TypeScript 2.0, this enables",
            " * powerful type checking of our reducers.",
            " * ",
            " * Since every action label passes through this function it",
            " * is a good place to ensure all of our action labels",
            " * are unique.",
            " */",
            "",
            "let typeCache: { [label: string]: boolean } = {};",
            "export function type<T>(label: T | ''): T {",
            "\tif (typeCache[<string>label]) {",
            "\t\tthrow new Error(`Action type \"${1:label}\" is not unique\"`);",
            "\t}",
            "",
            "\ttypeCache[<string>label] = true;",
            "",
            "\treturn <T>label;",
            "}"
        ]
    },
    "Angular ngRx Reducer": {
        "prefix": "ngrx-reducer",
        "description": "ngRx Reducer",
        "types": "typescript",
        "body": [
            "import * as ${1:class} from '../actions/${1:class}';",
            "",
            "export interface State {",
            " \t\t$1",
            "};",
            "",
            "const initialState: State = {",
            "\t\t$2",
            "};",
            "",
            "export function reducer(state = initialState, action: ${1:class}.Actions ): State {",
            "\tswitch (action.type) {",
            "\t\tcase ${1:class}.ActionTypes.${2:TYPE}: {",
            "\t\t\treturn {",
            "\t\t\t\t// return new ${1:class} state",
            "\t\t\t};",
            "\t\t}",
            "",
            "\t\tdefault: {",
            "\t\t\treturn state;",
            "\t\t}",
            "\t}",
            "}"
        ]
    },
    "Angular ngRx Actions": {
        "prefix": "ngrx-actions",
        "description": "ngRx Actions class",
        "types": "typescript",
        "body": [
            "import { Action } from '@ngrx/store';",
            "",
            "/**",
            " * For each action type in an action group, make a simple",
            " * enum object for all of this group's action types.",
            " */",
            "export enum ${2:Class}ActionTypes {",
            "\t${1:Verb1} = '[${2:Class}] ${1:Verb1}',",
            "\t${3:Verb2} = '[${2:Class}] ${3:Verb2}'",
            "};",
            "",
            "/**",
            " * Every action is comprised of at least a type and an optional",
            " * payload. Expressing actions as classes enables powerful ",
            " * type checking in reducer functions.",
            " */",
            "export class ${1:Verb1} implements Action {",
            "\treadonly type = ${2:Class}ActionTypes.${1:Verb1};",
            "",
            "\tconstructor(public payload: ${4:payloadType}) { }",
            "}",
            "",
            "export class ${3:Verb2} implements Action {",
            "\treadonly type = ${2:Class}ActionTypes.${3:Verb2};",
            "",
            "\tconstructor(public payload: ${5:payloadType2}) { }",
            "}",
            "",
            "/**",
            " * Export a type alias of all actions in this action group",
            " * so that reducers can easily compose action types",
            " */",
            "export type ${2:Class}Actions",
            "\t\t\t\t\t\t= ${1:Verb1}",
            "\t\t\t\t\t\t| ${3:Verb2};",
            ""
        ]
    },
    "Angular ngRx Root Module": {
        "prefix": "ngrx-module",
        "description": "ngRx Root Module",
        "types": "typescript",
        "body": [
            "import { NgModule } from '@angular/core';",
            "import { BrowserModule } from '@angular/platform-browser';",
            "import { RouterModule } from '@angular/router';",
            "import { StoreModule } from '@ngrx/store';",
            "import { RouterStoreModule } from '@ngrx/router-store';",
            "import { StoreDevtoolsModule } from '@ngrx/store-devtools';",
            "import { ${1:App}Component }  from './${2:app}.component';",
            "",
            "import { routes } from './routes';",
            "import { reducer } from './reducers';",
            "",
            "@NgModule({",
            "\tdeclarations: [ ${1:App}Component ],",
            "\timports: [",
            "\t\tBrowserModule,",
            "\t\tRouterModule.forRoot(routes, { useHash: true }),",
            "\t\tStoreModule.provideStore(reducer),",
            "\t\tRouterStoreModule.connectRouter(),",
            "\t\tStoreDevtoolsModule.instrumentOnlyWithExtension(),",
            "\t],",
            "\tproviders: [],",
            "\tbootstrap: [ ${1:App}Component ]",
            "})",
            "export class ${1:App}Module {}"
        ]
    },
    "Angular ngRx Action": {
        "prefix": "ngrx-action-const",
        "description": "ngRx Single action",
        "types": "typescript",
        "body": [
            "export const ${1:ACTION} = '[${2:NameSpace}] ${3:ACTION}';",
            "$0"
        ]
    },
    "Angular ngRx Action Creator": {
        "prefix": "ngrx-action-creator",
        "description": "ngRx Single action with const",
        "types": "typescript",
        "body": [
            "export const ${1:ACTION} = '[${2:NameSpace}] ${3:ACTION}';",
            "$0",
            "export class ${4:Class} implements Action {",
            "\treadonly type = ${1:ACTION};",
            "",
            "\tconstructor(public payload: ${5:payloadType}) { }",
            "}",
            ""
        ]
    },
    "Angular ngRx Action Creator Enum": {
        "prefix": "ngrx-action-creator-enum",
        "description": "ngRx Single action creator for enum",
        "types": "typescript",
        "body": [
            "export class ${1:Verb} implements Action {",
            "\treadonly type = ${2:Class}ActionTypes.${1:Verb};",
            "",
            "\tconstructor(public payload: ${3:payloadType}) { }",
            "}"
        ]
    },
    "Angular ngRx Enum ActionTypes": {
        "prefix": "ngrx-actiontypes-enum",
        "description": "ngRx enum action types",
        "types": "typescript",
        "body": [
            "export enum ${1:Class}ActionTypes {",
            "\t${2:Verb1} = '[${1:Class}] ${2:Verb1}',",
            "\t${3:Verb2} = '[${1:Class}] ${3:Verb2}'",
            "}"
        ]
    },
    "Angular ngRx Enum ActionType": {
        "prefix": "ngrx-actiontype-enum",
        "description": "ngRx enum action type",
        "types": "typescript",
        "body": [
            "${1:Verb} = '[${2:Class}] ${1:Verb}'$0"
        ]
    },
    "Angular ngRx Effect": {
        "prefix": "ngrx-effect",
        "description": "ngRx Effect",
        "types": "typescript",
        "body": [
            "import { Injectable } from '@angular/core';",
            "import { Observable } from 'rxjs';",
            "import { Action } from '@ngrx/store';",
            "import { Actions, Effect } from '@ngrx/effects';",
            "",
            "@Injectable()",
            "export class ${1:Name}Effects {",
            "\t@Effect() ${2:name}$: Observable<Action> = this.actions$.ofType('${3:ACTIONTYPE}')$1;",
            "",
            "\tconstructor(",
            "\t\tprivate ${4:actions}$: Actions",
            "\t) {}",
            "}"
        ]
    },
    "Angular Ngxs State": {
        "prefix": "ngxs-state",
        "description": "Ngxs State",
        "types": "typescript",
        "body": [
            "import { State } from '@ngxs/store';",
            "import { ${1:Name}StateModel } from './${2:name}.model';",
            "",
            "@State<${1:Name}StateModel>({",
            "\tdefaults: {",
            "\t}",
            "})",
            "export class ${1:Name}State {}",
            "$0"
        ]
    },
    "Angular Ngxs Action": {
        "prefix": "ngxs-action",
        "description": "Ngxs Action",
        "types": "typescript",
        "body": [
            "export class ${1:Action} {",
            "\tstatic readonly type = '[${2:FileName}] ${1:Action}]';",
            "}",
            "$0"
        ]
    },
    "Angular Ngxs Action With Payload": {
        "prefix": "ngxs-action-payload",
        "description": "Ngxs Action with Payload",
        "types": "typescript",
        "body": [
            "export class ${1:Action} {",
            "\tstatic readonly type = '[${2:FileName}] ${1:Action}]';",
            "\tconstructor(public readonly payload?: ${3:type:any}) {}",
            "}",
            "$0"
        ]
    },
    "Angular Ngxs State Model": {
        "prefix": "ngxs-state-model",
        "description": "Ngxs State Model",
        "types": "typescript",
        "body": [
            "export interface ${1:Name}StateModel {$2",
            "}",
            "$0"
        ]
    },
    "Angular Ngxs Store": {
        "prefix": "ngxs-store",
        "description": "Ngxs Store",
        "types": "typescript",
        "body": [
            "NgxsModule.forRoot([",
            "\t${1:Name}State",
            "])",
            "NgxsReduxDevtoolsPluginModule.forRoot(),",
            "NgxsLoggerPluginModule.forRoot()$0"
        ]
    },
    "Angular Ngxs Import Store": {
        "prefix": "ngxs-store-import",
        "description": "Ngxs Import Store",
        "types": "typescript",
        "body": [
            "import { NgxsModule } from '@ngxs/store';",
            "import { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';",
            "import { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';",
            "import { ${1:Name}State } from './${2:path}/${3:name}.state';",
            "$0"
        ]
    },
    "Angular Ngxs Select": {
        "prefix": "ngxs-select",
        "description": "Ngxs Select",
        "types": "typescript",
        "body": [
            "import { Select } from '@ngxs/store';",
            "",
            "import { ${1:Name} State } from './${2:name}.state';",
            "import { ${3:action} } from './${3:action}.actions';",
            "",
            "@Component({ ... })",
            "export class ${1:Name}Component {",
            " // Reads the name of the store from the store class",
            " @Select(${1:Name}State) ${3:action}$: Observable<${4:type}>;",
            "}",
            "$0"
        ]
    }
}
